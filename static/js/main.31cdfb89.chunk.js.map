{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uSAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEhBW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCgBPC,G,wLAGFC,KAAKP,MAAMQ,oB,+BAGH,IAAD,EACiDD,KAAKP,MAArDS,EADD,EACCA,YAAYC,EADb,EACaA,eAAetB,EAD5B,EAC4BA,OAAOuB,EADnC,EACmCA,UACpCC,EAAiBxB,EAAOyB,QAAO,SAAAC,GACnC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAASP,EAAYM,kBAEvD,OAAOJ,EACL,uCAEE,yBAAK3B,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAce,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAAQwB,U,GAlBZK,cAyBHC,eAtCS,SAAAC,GACtB,MAAO,CACLV,YAAYU,EAAMC,aAAaX,YAC/BrB,OAAO+B,EAAME,cAAcjC,WAIJ,SAACkC,GAC1B,MAAM,CACJZ,eAAiB,SAAAa,GAAK,OAAID,ECbrB,CACL1B,KCL+B,sBDM/B4B,QDWkDD,EAAME,OAAOC,SAC/DlB,gBAAkB,kBAAMc,GCRO,SAACA,GAClCA,EAAS,CAAC1B,KCT0B,2BDUpC+B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAIT,EAAS,CAAC1B,KCXO,yBDWqB4B,QAAQO,OAC5DC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAC1B,KCXM,uBDWoB4B,QAAQS,cD+BjDf,CAA4CZ,GGlCrD4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAAAkB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfwB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bd,OAAM,SAAAwB,GACLJ,QAAQI,MAAM,4CAA6CA,MC9FjE,IAAMC,EAAqB,CACzBhD,YAAY,IAYRiD,EAAqB,CACzBtE,OAAO,GACPuB,WAAU,EACV6C,MAAM,ICNFG,G,MAAcC,YAAgB,CAACxC,aDNT,WAAyC,IAAxCD,EAAuC,uDAAjCsC,EAAmBI,EAAc,uDAAP,GAC3D,OAAOA,EAAOjE,MACZ,IFR+B,sBES7B,OAAOkE,OAAOC,OAAO,GAAG5C,EAAM,CAACV,YAAYoD,EAAOrC,UACpD,QACE,OAAOL,ICCqCE,cDSrB,WAAuC,IAAtCF,EAAqC,uDAA/BuC,EAAmBG,EAAY,uDAAL,GAC5D,OAAOA,EAAOjE,MACZ,IFrBkC,yBEsBhC,OAAOkE,OAAOC,OAAO,GAAG5C,EAAM,CAACR,WAAU,IAC3C,IFtBkC,yBEuBhC,OAAOmD,OAAOC,OAAO,GAAG5C,EAAM,CAACR,WAAU,EAAMvB,OAAOyE,EAAOrC,UAC/D,IFvBgC,uBEwB9B,OAAOsC,OAAOC,OAAO,GAAG5C,EAAM,CAACqC,MAAMK,EAAOrC,QAAQb,WAAU,IAChE,QACE,OAAOQ,OCjBP6C,EAASC,yBACTC,EAAQC,YAAYR,EAAYS,YAAgBC,IAAgBL,IACtEM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFGnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,eAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAK,UAAMkC,eAAN,sBAEPzC,IAgEV,SAAiCO,EAAOC,GAEtCf,MAAMc,GACHb,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASmD,QAAQC,IAAI,gBAEnB,MAApBpD,EAASqD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMxD,MAAK,SAAAkB,GACjCA,EAAauC,aAAazD,MAAK,WAC7BQ,OAAOC,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1BV,OAAM,WACLoB,QAAQC,IACN,oEArFAkC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMxD,MAAK,WACjCwB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OE9B/BE,K","file":"static/js/main.31cdfb89.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { setSearchField,requestRobots } from '../action';\n\nconst mapStateToProps = state => {\n  return {\n    searchField:state.searchRobots.searchField,\n    robots:state.requestRobots.robots\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onSearchChange : event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots : () => dispatch(requestRobots())\n  }\n}\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField,onSearchChange,robots,isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_ERROR,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS } from \"./constants\";\n\nexport const setSearchField = (text) =>{\n  //console.log(text);\n  return({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n  })\n}\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type:REQUEST_ROBOTS_PENDING})\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:users}))\n      .catch(err => dispatch({type:REQUEST_ROBOTS_ERROR,payload:err}));\n} ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_ERROR = 'REQUEST_ROBOTS_ERROR';\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_ERROR,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS } from \"./constants\"\n\nconst initialStateSearch = {\n  searchField:''\n}\n\nexport const searchRobots = (state=initialStateSearch,action={}) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({},state,{searchField:action.payload});\n    default:\n      return state;  \n  }\n}\n\nconst initialStateRobots = {\n  robots:[],\n  isPending:false,\n  error:\"\"\n} \n\nexport const requestRobots = (state=initialStateRobots,action={})=>{\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({},state,{isPending:true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({},state,{isPending:false,robots:action.payload})\n    case REQUEST_ROBOTS_ERROR:\n      return Object.assign({},state,{error:action.payload,isPending:false})\n    default:\n      return state      \n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons'; \n\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App/> \n  </Provider>\n, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}